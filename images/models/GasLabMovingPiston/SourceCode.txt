extensions [sound soundx midi]

globals [
  was-reset
  fast average slow     ;; current counts
  avg-speed avg-energy  ;; current averages
  vsplit vclock         ;; clock variables
  raw-width raw-height  ;; box size variables
  piston-position       ;; position of the piston at any given time
  volume area           ;; because this is 2D, area is the perimeter and volume is the area
  total-pressure        ;; pressure per unit area
  pressure-history      ;; list of 'scale' previous total-pressures
  avg-pressure          ;; mean of the pressure-history
  initspeed initmass    ;; initial speed and initial mass of the all the particles-particle mass always stays the same, but the speed changes.
  going-down?           ;; flag for whether or not the piston is moving up or down

  ;; sliders' maximal & minimal values
  min-box-height          max-box-height
  min-box-width           max-box-width
  min-number              max-number
  min-piston-speed        max-piston-speed
  min-scale               max-scale
  min-dash-stride         max-dash-stride
  min-window-radius       max-window-radius
  min-window-stride       max-window-stride

  ;; constants for soundx extension
  current-folder                             ;; the path to the current folder of the model
  dash-particle-sound-file                   ;; the name of the sound file to be played when dashing a particle
  particle-collision-sound-file              ;; the name of the sound file to be played on a collision between an electron and an atom
  box-collision-sound-file                   ;; the name of the sound file to be played when particles collide with the box
  out-of-range-sound-file                    ;; the name of the sound file to be played when an increase/decrease button is pressed while the slider is at its limit
  center-crossing-sound-file                 ;; the name of the sound file to be played when a window passes a central axis (vertical or horizontal) of the world

  ;; variables for sonification
  old-volume?
  old-pressure?
  old-pressure-vs-volume?
  old-pressure-times-volume?
  old-count-fast?
  old-count-medium?
  old-count-slow?
  old-dash-particle?
  old-particle-collisions?
  old-hit-walls?
  old-energy-window?
  window-center-x
  window-center-y
  max-pressure-history
  note-volume

  sonification-volume-history
  sonification-pressure-history
  sonification-pressure-vs-volume-pressure-history
  sonification-pressure-vs-volume-volume-history
  sonification-pressure-times-volume-history
  sonification-count-fast-history
  sonification-count-average-history
  sonification-count-slow-history
  sonification-energy-window-history
]

turtles-own [
  speed mass energy new-speed            ;; Turtle Info
  v1t v1l tmp-turtle                     ;; Turtle 1 -- Collide
  heading2 mass2 speed2 v2t v2l turtle2  ;; Turtle 2 -- Collide
  theta                                  ;; Turtles 1 + 2 -- Collide
  pressure                               ;; pressure variable
  moved
]

;; procedure that setup up initial variables
to setup
  let bk-was-reset was-reset
  clear-all
  init-constants
  ifelse reset-on-setup? or bk-was-reset = 0
  [ init-variables ]
  [ reset-old-flags ]
  set was-reset 1
  init-sounds
  set going-down? true
  set pressure-history []
  set max-pressure-history 0
  set initspeed 10.0
  set initmass 1.0
  set raw-width  round (0.01 * box-width  * max-pxcor)
  set raw-height round (0.01 * box-height * max-pycor)
  set piston-position 0.75 * raw-height
  set area ((4 * raw-width) + (2 * (piston-position + raw-height)))
  set volume ((2 * raw-width) * (piston-position + raw-height))
  make-box
  draw-piston
  ;;set vclock 0
  ;; create the gas molecules
  create-turtles number [
     set new-speed initspeed
     set mass initmass
     random-position
     set shape "circle"
     recolor
     set pressure 0
  ]
  update-variables
  reset-ticks
  setup-histograms
end

to init-constants
  set note-volume 0.7
  set min-box-height 30
  set max-box-height 100
  set min-box-width 20
  set max-box-width 80
  set min-number 1
  set max-number 4000
  set min-piston-speed 0
  set max-piston-speed 10
  set min-scale 1
  set max-scale 10
  set min-dash-stride 1
  set max-dash-stride 10
  set min-window-radius 0
  set max-window-radius 20
  set min-window-stride 1
  set max-window-stride 20

  set sonification-volume-history []
  set sonification-pressure-history []
  set sonification-pressure-vs-volume-pressure-history []
  set sonification-pressure-vs-volume-volume-history []
  set sonification-pressure-times-volume-history []
  set sonification-count-fast-history []
  set sonification-count-average-history []
  set sonification-count-slow-history []
  set sonification-energy-window-history []

  ; constants for soundx files to be used in the module
  set current-folder word soundx:CURRENT-DIR "/"
  set particle-collision-sound-file word current-folder "billiard1.wav"
  set box-collision-sound-file word current-folder "Navajo_drum_short.wav"
  set dash-particle-sound-file word current-folder "telephone1.wav"
  set out-of-range-sound-file word current-folder "Navajo_drum_short.wav"
  set center-crossing-sound-file word current-folder "telephone1.wav"
end

to init-variables
  set volume? false
  set pressure? false
  set pressure-vs-volume? false
  set pressure-times-volume? false
  set count-fast? false
  set count-average? false
  set count-slow? false
  set trace-particle? false
  set dash-particle? false
  set particle-collisions? false
  set wall-hits? false
  set energy-window? false
  set old-energy-window? false

  update-old-flags
end

to init-sounds
  midi:conductor.stop
  midi:all.notes.off 1
  midi:all.notes.off 2
  midi:all.notes.off 3
  midi:all.notes.off 4
  midi:all.notes.off 5
  midi:all.notes.off 6
  midi:all.notes.off 7

  midi:conductor.clear.sheets
  midi:conductor.setplaymode.endless

  midi:instrument 1 volume-audiograph-instrument + 1
  midi:instrument 2 pressure-audiograph-instrument + 1
  midi:instrument 3 volume-times-pressure-audiograph-instrument + 1
  midi:instrument 4 count-fast-audiograph-instrument + 1
  midi:instrument 5 count-average-audiograph-instrument + 1
  midi:instrument 6 count-slow-audiograph-instrument + 1
  midi:instrument 7 window-sonification-instrument + 1
end

to update-old-flags
  set old-volume? volume?
  set old-pressure? pressure?
  set old-pressure-vs-volume? pressure-vs-volume?
  set old-pressure-times-volume? pressure-times-volume?
  set old-count-fast? count-fast?
  set old-count-medium? count-average?
  set old-count-slow? count-slow?
  set old-dash-particle? dash-particle?
  set old-particle-collisions? particle-collisions?
  set old-hit-walls? wall-hits?
end

to reset-old-flags
  set old-volume? false
  set old-pressure? false
  set old-pressure-vs-volume? false
  set old-pressure-times-volume? false
  set old-count-fast? false
  set old-count-medium? false
  set old-count-slow? false
  set old-dash-particle? false
  set old-particle-collisions? false
  set old-hit-walls? false
  set old-energy-window? false
end

;; updates variables after every time tick
to update-variables
  ;; Gas Variables
  ask turtles
    [ set speed new-speed
      set energy (0.5 * mass * speed * speed) ]
  set average count turtles with [ color = green ]
  set slow    count turtles with [ color = blue  ]
  set fast    count turtles with [ color = red   ]
  set avg-speed  mean [ speed  ] of turtles
  set avg-energy mean [ energy ] of turtles

  ;; System Variables
  calculate-pressure
  set vsplit (round (max [speed] of turtles * 1.2))
end

;; procedure that runs the model
to go
  ask turtles [bounce]
  ask turtles [move]
  ask turtles [check-for-collision]
  ;; control the piston's motion
  if piston-position < (-0.75 * raw-height)
  [ set going-down? false ]
  if piston-position > (0.75 * raw-height)
  [ set going-down? true ]
  ifelse going-down?
  [ piston-down piston-speed / vsplit ]
  [ piston-up piston-speed / vsplit ]

  ifelse trace-particle?
  [ ask turtle 0 [ pen-down ] ]
  [ ask turtle 0 [ pen-up ] ]

  ifelse dash-particle? [
    ask turtle 0 [
      set color yellow
      if not old-dash-particle? [ watch-me ]
      if floor moved / dash-stride  > 1 [
        make-dash-particle-sound
        set moved (moved mod dash-stride)
      ]
    ]
  ]
  [
    ask turtle 0 [
      if old-dash-particle? and not wall-hits? [ reset-perspective ]
      set moved 0
    ]
  ]

  if wall-hits? and not old-hit-walls? [ ask turtle 0 [ watch-me ] ]
  if not wall-hits? and old-hit-walls? and not dash-particle? [ ask turtle 0 [ reset-perspective ] ]


  ifelse particle-collisions? [
    ask turtle 0 [
      set color yellow
      if not old-particle-collisions? [ watch-me ]
    ]
  ]
  [
    ask turtle 0 [
      if old-particle-collisions? [ reset-perspective ]
    ]
  ]

  set vclock vclock + 1
  ifelse (vclock = vsplit)
  [
    tick
    set vclock 0
    update-variables
    do-plotting
    do-histograms

    sonify-model
  ]
  [ display ]

if energy-window? or old-energy-window? [ toggle-window energy-window? old-energy-window? ]
  if energy-window? [
    ifelse length sonification-energy-window-history < history-size
    [ set sonification-energy-window-history lput calculate-window-energy sonification-energy-window-history ]
    [ set sonification-energy-window-history but-first lput calculate-window-energy sonification-energy-window-history ]
  ]
  sonify-window energy-window? old-energy-window? 7 window-sonification-note calculate-window-energy 0 1 sonification-energy-window-history
  set old-energy-window? energy-window?

end

to sonify-model
  let sonification-current-flags []
  set sonification-current-flags ( lput volume? sonification-current-flags )
  set sonification-current-flags ( lput pressure? sonification-current-flags )
  set sonification-current-flags ( lput pressure-vs-volume? sonification-current-flags )
  set sonification-current-flags ( lput pressure-vs-volume? sonification-current-flags ) ;; twice added to list because activates 2 channels
  set sonification-current-flags ( lput pressure-times-volume? sonification-current-flags )
  set sonification-current-flags ( lput count-fast? sonification-current-flags )
  set sonification-current-flags ( lput count-average? sonification-current-flags )
  set sonification-current-flags ( lput count-slow? sonification-current-flags )
  let active-audiographs ( count-active-audiographs sonification-current-flags )
  let current-active 0

  ; sonification of volume plot
  if old-volume? != volume? [ toggle-audiograph-sonification volume? 1 volume-audiograph-note volume 0 (2 * raw-height * 2 * raw-width) ]
  if volume? [
    ifelse length sonification-volume-history < history-size
    [ set sonification-volume-history lput volume sonification-volume-history ]
    [ set sonification-volume-history but-first lput volume sonification-volume-history ]

    adjust-audiograph-sonification 1 volume 0 (2 * raw-height * 2 * raw-width) sonification-volume-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 1 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 1 0 ]
    set current-active ( current-active + 1)
  ]

  ; sonification of pressure plot
  if old-pressure? != pressure? [ toggle-audiograph-sonification pressure? 2 pressure-audiograph-note avg-pressure 0 max-pressure-history ]
  if pressure? [
    ifelse length sonification-pressure-history < history-size
    [ set sonification-pressure-history lput avg-pressure sonification-pressure-history ]
    [ set sonification-pressure-history but-first lput avg-pressure sonification-pressure-history ]

    adjust-audiograph-sonification 2 avg-pressure  0 max-pressure-history sonification-pressure-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 2 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 2 0 ]
    set current-active ( current-active + 1)
  ]

  if old-pressure-vs-volume? != pressure-vs-volume? [
    toggle-audiograph-sonification pressure-vs-volume? 1 volume-audiograph-note volume 0 (2 * raw-height * 2 * raw-width)
    toggle-audiograph-sonification pressure-vs-volume? 2 pressure-audiograph-note avg-pressure 0 max-pressure-history
  ]
  if pressure-vs-volume? [
    ifelse length sonification-pressure-vs-volume-volume-history < history-size
    [ set sonification-pressure-vs-volume-volume-history lput volume sonification-pressure-vs-volume-volume-history ]
    [ set sonification-pressure-vs-volume-volume-history but-first lput volume sonification-pressure-vs-volume-volume-history ]

    adjust-audiograph-sonification 1 volume 0 (2 * raw-height * 2 * raw-width) sonification-pressure-vs-volume-volume-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 1 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 1 0 ]
    set current-active ( current-active + 1)


    ifelse length sonification-pressure-vs-volume-pressure-history < history-size
    [ set sonification-pressure-vs-volume-pressure-history lput avg-pressure sonification-pressure-vs-volume-pressure-history ]
    [ set sonification-pressure-vs-volume-pressure-history but-first lput avg-pressure sonification-pressure-vs-volume-pressure-history ]

    adjust-audiograph-sonification 2 avg-pressure 0 max-pressure-history sonification-pressure-vs-volume-pressure-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 2 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 2 0 ]
    set current-active ( current-active + 1)
  ]

  if old-pressure-times-volume? != pressure-times-volume? [ toggle-audiograph-sonification pressure-times-volume? 3 volume-times-pressure-audiograph-note (avg-pressure * volume) 0 (max-pressure-history * (2 * raw-height * 2 * raw-width)) ]
  if pressure-times-volume? [
    ifelse length sonification-pressure-times-volume-history < history-size
    [ set sonification-pressure-times-volume-history lput (avg-pressure * volume) sonification-pressure-times-volume-history ]
    [ set sonification-pressure-times-volume-history but-first lput (avg-pressure * volume) sonification-pressure-times-volume-history ]

    adjust-audiograph-sonification 3 (avg-pressure * volume)  0 (max-pressure-history * (2 * raw-height * 2 * raw-width)) sonification-pressure-times-volume-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 3 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 3 0 ]
    set current-active ( current-active + 1)
  ]

  if old-count-fast? != count-fast? [ toggle-audiograph-sonification count-fast? 4 count-fast-audiograph-note (fast / count turtles) 0 1 ]
  if count-fast? [
    ifelse length sonification-count-fast-history < history-size
    [ set sonification-count-fast-history lput (fast / count turtles) sonification-count-fast-history ]
    [ set sonification-count-fast-history but-first lput (fast / count turtles) sonification-count-fast-history ]

    adjust-audiograph-sonification 4 (fast / count turtles) 0 1 sonification-count-fast-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 4 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 4 0 ]
    set current-active ( current-active + 1)
  ]

  if old-count-medium? != count-average? [ toggle-audiograph-sonification count-average? 5 count-average-audiograph-note (average / count turtles) 0 1 ]
  if count-average? [
    ifelse length sonification-count-average-history < history-size
    [ set sonification-count-average-history lput (average / count turtles) sonification-count-average-history ]
    [ set sonification-count-average-history but-first lput (average / count turtles) sonification-count-average-history ]

    adjust-audiograph-sonification 5 (average / count turtles) 0 1 sonification-count-average-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 5 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 5 0 ]
    set current-active ( current-active + 1)
  ]

  if old-count-slow? != count-slow? [ toggle-audiograph-sonification count-slow? 6 count-slow-audiograph-note (slow / count turtles) 0 1 ]
  if count-slow? [
    ifelse length sonification-count-slow-history < history-size
    [ set sonification-count-slow-history lput (slow / count turtles) sonification-count-slow-history ]
    [ set sonification-count-slow-history but-first lput (slow / count turtles) sonification-count-slow-history ]

    adjust-audiograph-sonification 6 (slow / count turtles) 0 1 sonification-count-slow-history

    ifelse audiograph-sonification-orientation?
    [ midi:pan 6 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 6 0 ]
    set current-active ( current-active + 1)
  ]

  update-old-flags
end

to stop-sonification
  set volume? false
  set pressure? false
  set pressure-vs-volume? false
  set pressure-times-volume? false
  set count-fast? false
  set count-average? false
  set count-slow? false
  set trace-particle? false
  set dash-particle? false
  set particle-collisions? false
  set wall-hits? false
  set energy-window? false

  go
end


;; turtle procedure for bouncing off of the walls
to bounce
  ; if we're not about to hit a wall (yellow patch)
  ; or the piston (gray+2 patch),
  ; we don't need to do any further checks
  ;if ([pcolor] of patch-ahead 1 != yellow) and
  ;   ([pcolor] of patch-ahead 1 != gray + 2) [ stop ]
  if (not (is-box-frame? ([pxcor] of patch-ahead 1) ([pycor] of patch-ahead 1))) [ stop ] ; variation on the above condition: checking location of patches to determine if they are part of the box frame or not (rather than checking the colors)
  ; get the coordinates of the patch we'll be on if we go forward 1
  let new-px [pxcor] of patch-ahead 1
  let new-py [pycor] of patch-ahead 1
  ; check: hitting left or right wall?
  if (abs new-px = raw-width)
    ; if so, reflect heading around x axis
    [
      set heading (- heading)
      set pressure pressure + abs (dx * mass * speed)
      if wall-hits? and who = 0 [ make-box-collision-sound ]
    ]
  ; check: hitting piston or bottom wall?
  if (abs new-py = raw-height) or (new-py = round piston-position)
    ; if so, reflect heading around y axis
    [
      set heading (180 - heading)
      set pressure pressure + abs (dy * mass * speed)
      if wall-hits? and who = 0 [ make-box-collision-sound ]
    ]
end

;; turtle procedure that moves all the particles
to move
  jump (speed / vsplit)
  set moved (moved + (speed / vsplit))
end

;; turtle procedure to check to see if two particles collide
to check-for-collision
  if count other turtles-here = 1
    [ set tmp-turtle one-of other turtles-here
      if ((who > [who] of tmp-turtle) and (turtle2 != tmp-turtle)) [ collide ]
      if who = 0 and particle-collisions? [ make-particle-collision-sound ]
    ]
end

;; turtle procedure for when two particles collide
to collide
  get-turtle2-info
  calculate-velocity-components
  set-new-speed-and-headings
end

;; turtle gets mass and speed info from turtle it is colliding with
to get-turtle2-info
  set turtle2 tmp-turtle
  set mass2 [mass] of turtle2
  set speed2 [new-speed] of turtle2
  set heading2 [heading] of turtle2
end

;; calculates new turtle velocity after the collision
to calculate-velocity-components
  set theta (random-float 360)
  set v1l (new-speed * sin (theta - heading))
  set v1t (new-speed * cos (theta - heading))
  set v2l (speed2 * sin (theta - heading2))
  set v2t (speed2 * cos (theta - heading2))
  let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2))
  set v1t (vcm + vcm - v1t)
  set v2t (vcm + vcm - v2t)
end

;; set new speed and headings of each turtles that has had a collision
to set-new-speed-and-headings
  set new-speed sqrt ((v1t * v1t) + (v1l * v1l))
  set heading (theta - (atan v1l v1t))

  let new-speed2 sqrt ((v2t * v2t) + (v2l * v2l))
  let new-heading (theta - (atan v2l v2t))
  ask turtle2 [
    set new-speed new-speed2
    set heading new-heading
  ]

  recolor
  ask turtle2 [ recolor ]
end

to recolor  ;; turtle procedure
  ifelse new-speed < (0.5 * initspeed)
    [ set color blue ]
    [ ifelse new-speed > (1.5 * initspeed)
        [ set color red ]
        [ set color green ] ]
end

;; patch procedure to make a box
to-report is-box-frame? [ x y ]
  report (abs x = raw-width and (y <= round piston-position and y >= (-1) * raw-height)) or ((y = round piston-position or y = (-1) * raw-height) and abs x <= raw-width)
end

to make-box
  ask patches [ set pcolor black ]
  ask patches with [ ((abs pxcor = raw-width) and (abs pycor <= raw-height)) or
                     ((abs pycor = raw-height) and (abs pxcor <= raw-width)) ]
    [ set pcolor yellow ]
end

;; turtle procedure to give turtles a random position within the confined area
to random-position
  setxy ((1 - raw-width)  + random-float (2 * raw-width - 2))
        ((1 - raw-height) + random-float (raw-height + piston-position - 2))
end


;; ------ Piston ----------
to piston-up [dist]
  if (dist > 0)
  [ ifelse ((piston-position + dist) < raw-height - 1)
    [ undraw-piston
      set piston-position (piston-position + dist)
      draw-piston ]
    [ undraw-piston
      set piston-position (raw-height - 1)
      draw-piston ]
    set volume ((2 * raw-width) * (piston-position + raw-height))
    set area ((4 * raw-width) + (2 * (piston-position + raw-height)))
  ]
end

to piston-down [dist]
  if (dist > 0)
  [ ifelse (piston-position - dist) > (2 - raw-height)
    [ undraw-piston
      set piston-position (piston-position - dist)
      ask turtles
      [ if (ycor >= (piston-position - 1))
        [ bounce-off-piston ] ]
      draw-piston ]
    [ undraw-piston
      set piston-position (3 - raw-height)
      ask turtles
      [ if (pycor >= 3 - raw-height)
        [ bounce-off-piston ] ]
      draw-piston ]
    set area ((4 * raw-width) + (2 * (piston-position + raw-height)))
    set volume ((2 * raw-width) * (piston-position + raw-height))
  ]
end

to draw-piston
  ask patches with [ ((pycor = (round piston-position)) and ((abs pxcor) < raw-width)) ]
    [ set pcolor gray + 2 ]
end

to undraw-piston
  ask patches with [ (pycor = round piston-position) and ((abs pxcor) < raw-width) ]
    [ set pcolor black ]
end

to bounce-off-piston  ;; Turtles procedure particle bounces off piston
  ifelse ((((2 * piston-position) - (ycor + 2)) < (1 - raw-height)) or
          (((2 * piston-position) - (ycor + 2)) > (piston-position - 2)))
   [ set ycor ((random (raw-height + piston-position - 2)) - (raw-height - 1)) ]
   [ set ycor ((2 * piston-position) - (ycor + 2)) ]
end

to calculate-pressure  ;; Observer procedure
  set total-pressure 100 * (sum [pressure] of turtles) / area
  ifelse (length pressure-history < scale)
  [ set pressure-history fput total-pressure pressure-history ]
  [ set pressure-history fput total-pressure but-last pressure-history ]
  set avg-pressure mean pressure-history
  if avg-pressure > max-pressure-history [ set max-pressure-history avg-pressure ]
  ;; rezero pressures in preparation for the next cycle
  ask turtles [ set pressure 0 ]
end

;;; plotting procedures
to setup-histograms
  ;; Speed Histogram
  set-current-plot "Speed histogram"
  set-plot-x-range 0 (initspeed * 2)
  set-plot-y-range 0 ceiling (number / 6)
  set-current-plot-pen "average"
  set-histogram-num-bars 45
  set-current-plot-pen "fast"
  set-histogram-num-bars 45
  set-current-plot-pen "slow"
  set-histogram-num-bars 45

  ;; Energy histogram
  set-current-plot "Energy histogram"
  set-plot-x-range 0 (0.5 * (initspeed * 2) * (initspeed * 2) * initmass)
  set-plot-y-range 0 ceiling (number / 6)
  set-current-plot-pen "average"
  set-histogram-num-bars 45
  set-current-plot-pen "fast"
  set-histogram-num-bars 45
  set-current-plot-pen "slow"
  set-histogram-num-bars 45
end

;; does actual plotting (called in Go)
to do-plotting
  set-current-plot "Volume"
  plot volume
  set-current-plot "Pressure"
  plot avg-pressure
  set-current-plot "Temperature"
  plot avg-energy
  set-current-plot "Pressure vs. Volume"
  plotxy volume avg-pressure
  set-current-plot "Pressure * Volume"
  plot avg-pressure * volume / 1000
end

;; does actual histograms plotting (called in Go)
to do-histograms
  if (histogram?)
    [ histo-energy
      histo-speed ]
end

;; draw energy histogram
to histo-energy
  set-current-plot "Energy histogram"
  set-current-plot-pen "average"
  histogram [ energy ] of turtles with [ color = green ]
  set-current-plot-pen "slow"
  histogram [ energy ] of turtles with [ color = blue ]
  set-current-plot-pen "fast"
  histogram [ energy ] of turtles with [ color = red ]
  set-current-plot-pen "avg-energy"
  plot-pen-reset
  draw-vert-line avg-energy
end

;; draw speed histogram
to histo-speed
  set-current-plot "Speed histogram"
  set-current-plot-pen "average"
  histogram [ speed ] of turtles with [ color = green ]
  set-current-plot-pen "slow"
  histogram [ speed ] of turtles with [ color = blue ]
  set-current-plot-pen "fast"
  histogram [ speed ] of turtles with [ color = red ]
  set-current-plot-pen "avg-speed"
  plot-pen-reset
  draw-vert-line avg-speed
end

; draws a vertical line at xval on the current-plot with the current plot-pen
to draw-vert-line [xval]
  plotxy xval plot-y-min
  plot-pen-down
  plotxy xval plot-y-max
  plot-pen-up
end

;;;
;;; Sonification of the module
;;;

to-report calculate-window-energy
  let window-energy 0
  let total-energy 0

  ask turtles [
    set total-energy (total-energy + energy)
    if (is-in-window? energy-window? xcor ycor) [ set window-energy (window-energy + energy) ]
  ]

  ifelse total-energy = 0
  [ report 0 ]
  [ report window-energy / total-energy ]
end

;; This procedure is called whenever a user tries to increment/decrement the value of a slider outside of defined range
to make-out-of-range-sound
  soundx:play-soundfile out-of-range-sound-file 0 0
end

to make-dash-particle-sound
  soundx:play-soundfile dash-particle-sound-file (6 * ycor / min-pycor) (xcor / max-pxcor)
end

to make-particle-collision-sound
  soundx:play-soundfile particle-collision-sound-file (6 * ycor / min-pycor) (xcor / max-pxcor)
end

to make-box-collision-sound
  soundx:play-soundfile box-collision-sound-file (6 * ycor / min-pycor) (xcor / max-pxcor)
end

to make-center-crossing-sound
  soundx:play-soundfile center-crossing-sound-file 1 0
end

;; This procedure is called whenever a slider's value is updated, in order to sonify the current value of that slider
to sonify-slider [ current-value min-value max-value ]
  sound:play-note (item slider-instrument sound:instruments) 44 round (127 * ((current-value - min-value) / (max-value - min-value))) 0.25
end

;; This procedure is called whenever a switch value is changed using a corresponding button (not the switch itself)
to sonify-switch [ current-value ]
  ifelse current-value
  [ sound:play-note (item slider-instrument sound:instruments) 44 80 0.25 ]
  [ sound:play-note (item slider-instrument sound:instruments) 44 25 0.25 ]
end

to-report count-active-audiographs [ sonification-flags ]
  let active 0
  let list-size length sonification-flags
  while [ list-size > 0 ][
    if ( item ( list-size - 1) sonification-flags ) [ set active ( active + 1 ) ]
    set list-size (list-size - 1)
  ]
  report active
end

to-report get-pan [ current-active active-audiographs ]
  ifelse active-audiographs > 1
  [
    if ( current-active mod 3 ) = 0 [ report -1 ]
    if ( current-active mod 3 ) = 1 [ report 1 ]
    if ( current-active mod 3 ) = 2 [ report 0 ]
  ]
  [ report 0 ]
end

to toggle-audiograph-sonification [ start? channel note current-value min-value max-value ]
  let min-volume min-value
  let max-volume max-value
  let current-volume current-value

  ifelse start? [
    if min-value != 0 [
      set min-volume 0
      set max-volume (max-value - min-value)
      set current-volume (current-value - min-value)
    ]
    midi:noteon channel note 0.8
    ifelse max-value != 0
    [ midi:pitch.bend channel ((current-value / max-value) - 0.5 ) * 2 ]
    [ midi:pitch.bend channel -1 ]
  ]
  [ midi:all.notes.off channel ]
end

to adjust-audiograph-sonification [ channel current-value min-value max-value history ]
  if sonify-from-history? and length history > 0 [
    set min-value min history
    set max-value max history
  ]
  let min-volume min-value
  let max-volume max-value
  let current-volume current-value

  if min-value != 0 [
    set min-volume 0
    set max-volume (max-value - min-value)
    set current-volume (current-value - min-value)
  ]
  ifelse max-volume != 0
  [ midi:pitch.bend channel ((current-volume / max-volume) - 0.5 ) * 2 ]
  [ midi:pitch.bend channel -1 ]
end

to-report is-in-window? [ window? x y ]
  report window? and (x <= max-pxcor and x >= min-pxcor and (abs (x - window-center-x) < (window-radius + 1)) and y <= max-pycor and y >= min-pycor and (abs (y - window-center-y) < (window-radius + 1)))
end

to toggle-window [ window? old-window? ]
  if window? [
    ask patches with [ (pxcor <= max-pxcor and pxcor >= min-pxcor and (abs (pxcor - window-center-x) = (window-radius + 1)) and pycor <= max-pycor and pycor >= min-pycor and (abs (pycor - window-center-y) <= (window-radius + 1))) or
                       (pxcor <= max-pxcor and pxcor >= min-pxcor and (abs (pxcor - window-center-x) <= (window-radius + 1)) and pycor <= max-pycor and pycor >= min-pycor and (abs (pycor - window-center-y) = (window-radius + 1))) ]
    [ set pcolor cyan ]
  ]
  if not window? and old-window? [ make-box ]
end

to shift-window-up [ window? ]
  ifelse (window-center-y + window-stride) <= max-pycor and window?
  [ window-shifted-actions 0 window-stride ]
  [ make-out-of-range-sound ]
end

to shift-window-right [ window? ]
  ifelse (window-center-x + window-stride) <= max-pxcor and window?
  [ window-shifted-actions window-stride 0 ]
  [ make-out-of-range-sound ]
end

to shift-window-left [ window? ]
  ifelse (window-center-x - window-stride) >= min-pxcor and  window?
  [ window-shifted-actions ((-1) * window-stride) 0 ]
  [ make-out-of-range-sound ]
end

to shift-window-down [ window? ]
  ifelse (window-center-y - window-stride) >= min-pycor and  window?
  [ window-shifted-actions 0 ((-1) * window-stride) ]
  [ make-out-of-range-sound ]
end

to window-shifted-actions [ x-shift y-shift ]
  set window-center-x (window-center-x + x-shift)
  set window-center-y (window-center-y + y-shift)

  if (x-shift != 0 and (window-center-x * (window-center-x - x-shift) <= 0)) or
     (y-shift != 0 and (window-center-y * (window-center-y - y-shift) <= 0)) [ make-center-crossing-sound ]

  make-box
  toggle-window true false
end

to sonify-window [ window? old-window? sheet note current-value min-value max-value history ]
  if sonify-from-history? and length history > 0 [
    set min-value min history
    set max-value max history
  ]
  if window? and not old-window? ; window was just toggled on
  [ midi:noteon sheet note note-volume ]
  if window? and old-window? ; window has been on for a while
  [
    ifelse max-value = 0
    [ midi:pitch.bend sheet -1 ]
    [ midi:pitch.bend sheet ((current-value / max-value - 0.5) * 2) ]
  ]
  if not window? and old-window? ; window was just toggled off
  [ midi:all.notes.off sheet ]
end

; Copyright 2002 Uri Wilensky.
; See Info tab for full copyright and license.