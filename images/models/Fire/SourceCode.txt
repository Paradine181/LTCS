extensions [ sound soundx midi ]

globals [
  was-reset
  initial-trees   ;; how many trees (green patches) we started with
  burned-trees    ;; how many have burned so far

  ;; constants for sliders' boundaries
  min-density       max-density
  min-window-radius max-window-radius
  min-window-stride max-window-stride

  ;; variables to hold the orientation of the sonification (of audiographs)
  old-percent-burned-sonification?
  old-fire-distance-sonification?
  old-remaining-trees-window?

  ;; constants for soundx extension
  current-folder                             ;; the path to the current folder of the model
  out-of-range-sound-file                    ;; the name of the sound file to be played when an increase/decrease button is pressed while the slider is at its limit
  center-crossing-sound-file                 ;; the name of the sound file to be played when a window passes a central axis (vertical or horizontal) of the world

  ;; general variables for sonification
  fire-distance
  watch-patch-x watch-patch-y
]

breed [fires fire]    ;; bright red turtles -- the leading edge of the fire
breed [embers ember]  ;; turtles gradually fading from red to near black

to setup
  let bk-was-reset was-reset
  clear-all
  init-constants
  if reset-on-setup? or bk-was-reset = 0 [ init-variables ]
  set was-reset 1
  init-sounds
  set-default-shape turtles "square"
  ;; make some green trees
  ask patches with [(random-float 100) < density]
    [ set pcolor green ]
  ;; make a column of burning trees
  ask patches with [pxcor = min-pxcor]
    [ ignite ]
  ;; set tree counts
  set initial-trees count patches with [pcolor = green]
  set burned-trees 0
  reset-ticks
end

to init-constants
  set min-density 0
  set max-density 99
  set min-window-radius 0
  set max-window-radius 20
  set min-window-stride 1
  set max-window-stride 20
  ; constants for soundx files to be used in the module
  set current-folder word soundx:CURRENT-DIR "/"
  set out-of-range-sound-file word current-folder "Navajo_drum_short.wav"
  set center-crossing-sound-file word current-folder "telephone1.wav"
end

to init-sounds
  midi:all.notes.off 1
  midi:all.notes.off 2
  midi:all.notes.off 3

  midi:conductor.clear.sheets
  midi:conductor.setplaymode.endless

  midi:instrument 1 percent-burned-sonification-instrument + 1
  midi:instrument 2 fire-distance-sonification-instrument + 1
  midi:instrument 3 remaining-trees-window-sonification-instrument + 1
end

to init-variables
  set percent-burned-sonification? false
  set remaining-trees-window? false
  set fire-distance-sonification? false
  set fire-distance min-pxcor

  update-old-flags
end

to update-old-flags
  set old-percent-burned-sonification? percent-burned-sonification?
  set old-fire-distance-sonification? fire-distance-sonification?
  set old-remaining-trees-window? remaining-trees-window?
end

to go
  if not any? turtles and not remaining-trees-window?  ;; either fires or embers
    [ stop ]
  ask fires
    [ ask neighbors4 with [pcolor = green or pcolor = yellow + 3 ]
        [ ignite ]
      set breed embers ]
  fade-embers

  sonify-model

  tick
end

to sonify-model
  let sonification-current-flags []
  set sonification-current-flags ( lput percent-burned-sonification? sonification-current-flags )
  set sonification-current-flags ( lput remaining-trees-window? sonification-current-flags )
  let active-audiographs ( count-active-audiographs sonification-current-flags )
  let current-active 0

  if percent-burned-sonification? != old-percent-burned-sonification? [ toggle-audiograph-sonification percent-burned-sonification? 1 percent-burned-sonification-note (burned-trees / initial-trees) 0 1 ]
  if percent-burned-sonification? [
    adjust-audiograph-sonification 1 (burned-trees / initial-trees) 0 1
    ifelse audiograph-sonification-orientation?
    [ midi:pan 1 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 1 0 ]
    set current-active ( current-active + 1)
  ]

  if old-fire-distance-sonification? != fire-distance-sonification? [ toggle-audiograph-sonification fire-distance-sonification? 2 fire-distance-sonification-note fire-distance min-pxcor max-pxcor ]
  if fire-distance-sonification? [
    adjust-audiograph-sonification 2 fire-distance min-pxcor max-pxcor
    midi:pan 2 fire-distance / max-pxcor
  ]

  if remaining-trees-window? != old-remaining-trees-window? [ toggle-window remaining-trees-window? (not remaining-trees-window?) 3 remaining-trees-window-sonification-note ]
  if remaining-trees-window? [
    adjust-window-sonification 3 count-trees-in-window 0 ((2 * window-radius + 1) ^ 2)
    ifelse audiograph-sonification-orientation?
    [ midi:pan 3 ( get-pan current-active active-audiographs ) ]
    [ midi:pan 3 0 ]
    set current-active ( current-active + 1)
  ]

  update-old-flags
end

to stop-sonification
  set percent-burned-sonification? false
  set fire-distance-sonification? false
  set remaining-trees-window? false

  sonify-model
end

to-report count-trees-in-window
  let trees-in-window 0
  ask patches with [ pcolor = green ] [ if is-in-window? pxcor pycor [ set trees-in-window (trees-in-window + 1) ] ]
  report trees-in-window
end

;; creates the fire turtles
to ignite  ;; patch procedure
  sprout-fires 1 [
    set color red
    if xcor > fire-distance [ set fire-distance xcor ]
  ]
  set pcolor black
  set burned-trees burned-trees + 1
end

;; achieve fading color effect for the fire as it burns
to fade-embers
  ask embers
    [ set color color - 0.3  ;; make red darker
      if color < red - 3.5     ;; are we almost at black?
        [ set pcolor color
          die ] ]
end

;;
;; Sonification
;;

;; This procedure is called whenever a slider's value is updated, in order to sonify the current value of that slider
to sonify-slider [ current-value min-value max-value ]
  if max-value != min-value [ sound:play-note (item slider-instrument sound:instruments) 44 round (127 * ((current-value - min-value) / (max-value - min-value))) 0.25 ]
end

;; This procedure is called whenever a switch value is changed using a corresponding button (not the switch itself)
to sonify-switch [ current-value ]
  ifelse current-value
  [ sound:play-note (item slider-instrument sound:instruments) 44 80 0.25 ]
  [ sound:play-note (item slider-instrument sound:instruments) 44 25 0.25 ]
end

to sonify-event [ sound-file volume pan ]
  soundx:play-soundfile sound-file (12 * (volume - 0.5)) pan ; expecting volume to be in the range 0-1 (like in midi extension)
end

to-report count-active-audiographs [ sonification-flags ]
  let active 0
  let list-size length sonification-flags
  while [ list-size > 0 ][
    if ( item ( list-size - 1) sonification-flags ) [ set active ( active + 1 ) ]
    set list-size (list-size - 1)
  ]
  report active
end

;; This procedure toggle audiograph sonification:
;; 1. scales the current value, min value and max value to be in the [0, 1] (while preserving the ratio
;; 2. activates the following transform on the scale value (denoted by x): (2 * (x - 0.5)) to achieve values in the range [-1, 1]
;; 3. activates the sonification (on given channel, using given note and pitch is chosen by the value calculated in step "2")
;;
;; @param start? - whether to start or to stop the sonification
;; @param channel - what channel number (1-16) is use
;; @param note - the note to be played
;; @param current-value - the value to be sonified
;; @param min-value - the lower bound of possible values
;; @param max-value - the upper bound of possible values
;;
;; @returns the orientation of the sonification (if active) or 0 if not active
;;
to toggle-audiograph-sonification [ start? channel note current-value min-value max-value ]
  let min-volume min-value
  let max-volume max-value
  let current-volume current-value

  ifelse start? [
    if min-value != 0 [
      set min-volume 0
      set max-volume (max-value - min-value)
      set current-volume (current-value - min-value)
    ]
    midi:noteon channel note 0.8
    ifelse max-value != 0
    [ midi:pitch.bend channel ((current-value / max-value) - 0.5 ) * 2 ]
    [ midi:pitch.bend channel -1 ]
  ]
  [ midi:all.notes.off channel ]
end

to adjust-audiograph-sonification [ channel current-value min-value max-value ]
  let min-volume min-value
  let max-volume max-value
  let current-volume current-value

  if min-value != 0 [
    set min-volume 0
    set max-volume (max-value - min-value)
    set current-volume (current-value - min-value)
  ]
  ifelse max-value != 0
  [ midi:pitch.bend channel ((current-volume / max-volume) - 0.5 ) * 2 ]
  [ midi:pitch.bend channel -1 ]
end

to-report get-pan [ current-active active-audiographs ]
  ifelse active-audiographs > 1
  [
    if ( current-active mod 3 ) = 0 [ report -1 ]
    if ( current-active mod 3 ) = 1 [ report 1 ]
    if ( current-active mod 3 ) = 2 [ report 0 ]
  ]
  [ report 0 ]
end

to-report increase-slider-value [ variable increase-by min-limit max-limit prec ]
  set variable (variable + increase-by)
  ifelse variable > max-limit
  [
    set variable max-limit
    sonify-event out-of-range-sound-file 0.5 0
  ]
  [ sonify-slider variable min-limit max-limit ]
  report precision variable prec
end

to-report decrease-slider-value [ variable decrease-by min-limit max-limit prec ]
  set variable (variable - decrease-by)
  ifelse variable < min-limit
  [
    set variable min-limit
    sonify-event out-of-range-sound-file 0.5 0
  ]
  [ sonify-slider variable min-limit max-limit ]
  report precision variable prec
end

to toggle-window [ is-on? stay-on? channel note ]
  ifelse is-on? [
    ask patches [
      if (pxcor <= max-pxcor and pxcor >= min-pxcor and (abs (pxcor - watch-patch-x) = (window-radius + 1)) and pycor <= max-pycor and pycor >= min-pycor and (abs (pycor - watch-patch-y) <= (window-radius + 1))) or
         (pxcor <= max-pxcor and pxcor >= min-pxcor and (abs (pxcor - watch-patch-x) <= (window-radius + 1)) and pycor <= max-pycor and pycor >= min-pycor and (abs (pycor - watch-patch-y) = (window-radius + 1)))
      [
        if pcolor = green [ set pcolor yellow + 3 ]
        if pcolor = black [ set pcolor yellow ]
        if pcolor < 15 and pcolor > 10 [ set pcolor yellow - 3 ]
      ]
    ]
    if not stay-on? [ midi:noteon channel note 0.8 ]
  ]
  [
    ask patches with [ pcolor = yellow + 3 ] [ set pcolor green ]
    ask patches with [ pcolor = yellow ] [ set pcolor black ]
    ask patches with [ pcolor = yellow - 3 ] [ set pcolor red - 3.6 ]
    if stay-on? [ midi:all.notes.off channel ]
  ]
end

to adjust-window-sonification [ channel current-value min-value max-value ]
  ifelse max-value - min-value = 0
  [ midi:pitch.bend channel -1 ]
  [
    let min-volume min-value
    let max-volume max-value
    let current-volume current-value
    set min-volume 0
    set max-volume (max-value - min-value)
    set current-volume (current-value - min-value)
    midi:pitch.bend channel ((current-volume / max-volume) - 0.5) * 2
  ]
end

to-report is-in-window? [ x-cor y-cor ]
  report (x-cor <= (watch-patch-x + window-radius) and x-cor >= (watch-patch-x - window-radius) and y-cor <= (watch-patch-y + window-radius) and y-cor >= (watch-patch-y - window-radius))
end

to window-shifted-actions [ x-shift y-shift channel note ]
  set watch-patch-x (watch-patch-x + x-shift)
  set watch-patch-y (watch-patch-y + y-shift)
  toggle-window false false channel note ; remove previous window
  toggle-window true true channel note ; draw new window

  if (x-shift != 0 and (watch-patch-x * (watch-patch-x - x-shift) <= 0)) or
     (y-shift != 0 and (watch-patch-y * (watch-patch-y - y-shift) <= 0)) [ sonify-event center-crossing-sound-file 1 0 ]
end

to shift-window-up [ is-on? channel note ]
  ifelse (watch-patch-y + window-stride) <= max-pycor and is-on?
  [ window-shifted-actions 0 window-stride channel note ]
  [ sonify-event out-of-range-sound-file 0 0 ]
end

to shift-window-right [ is-on? channel note ]
  ifelse (watch-patch-x + window-stride) <= max-pxcor and is-on?
  [ window-shifted-actions window-stride 0 channel note ]
  [ sonify-event out-of-range-sound-file 0 0 ]
end

to shift-window-left [ is-on? channel note ]
  ifelse (watch-patch-x - window-stride) >= min-pxcor and is-on?
  [ window-shifted-actions ((-1) * window-stride) 0 channel note ]
  [ sonify-event out-of-range-sound-file 0 0 ]
end

to shift-window-down [ is-on? channel note ]
  ifelse (watch-patch-y - window-stride) >= min-pycor and is-on?
  [ window-shifted-actions 0 ((-1) * window-stride) channel note ]
  [ sonify-event out-of-range-sound-file 0 0 ]
end


; Copyright 1997 Uri Wilensky.
; See Info tab for full copyright and license.